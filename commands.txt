rm -r CMakeFiles elf2uf2 generated pico-sdk pioasm cmake_install.cmake CMakeCache.txt Makefile

cmake -D PICO_NUMPAD_PATH=/Pico/pico-keypad ../../

cp /Pico/pico-keypad/src/build/pico-keypad.uf2 /media/vboxuser/RPI-RP2/

make pico-keypad




    int8_t current_row = 0;

   // scan first row
    gpio_set_dir(rows_pins[current_row], GPIO_OUT);
    gpio_put(rows_pins[current_row], 0);
    busy_wait_us_32(1);

    if(!gpio_get(columns_pins[0])){
        memcpy(&key_state, &layout[current_row][0], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    }
    else if(!gpio_get(columns_pins[1])){
        memcpy(&key_state, &layout[current_row][1], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    }
    else if(!gpio_get(columns_pins[2])){
        memcpy(&key_state, &layout[current_row][2], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    }
    else if(!gpio_get(columns_pins[3])){
        memcpy(&key_state, &layout[current_row][3], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    }
    
    gpio_set_dir(rows_pins[current_row], GPIO_IN);
    //gpio_pull_up(rows_pins[current_row]);

    // scan second row
    current_row = 1;
    gpio_set_dir(rows_pins[current_row], GPIO_OUT);
    gpio_put(rows_pins[current_row], 0);
    busy_wait_us_32(1);


    if(!gpio_get(columns_pins[0])) {
        memcpy(&key_state, &layout[current_row][0], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    } 
    else if(!gpio_get(columns_pins[1])){
        memcpy(&key_state, &layout[current_row][1], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    }
    else if(!gpio_get(columns_pins[2])){
        memcpy(&key_state, &layout[current_row][2], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    }
    else if(!gpio_get(columns_pins[3])){
        memcpy(&key_state, &layout[current_row][3], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    }
    
    gpio_set_dir(rows_pins[current_row], GPIO_IN);

    // third row
    current_row = 2;
    gpio_set_dir(rows_pins[current_row], GPIO_OUT);
    gpio_put(rows_pins[current_row], 0);
    busy_wait_us_32(1);


    if(!gpio_get(columns_pins[0])) {
        memcpy(&key_state, &layout[current_row][0], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    } 
    else if(!gpio_get(columns_pins[1])){
        memcpy(&key_state, &layout[current_row][1], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    }
    else if(!gpio_get(columns_pins[2])){
        memcpy(&key_state, &layout[current_row][2], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    }
    else if(!gpio_get(columns_pins[3])){
        memcpy(&key_state, &layout[current_row][3], HID_KEYBOARD_REPORT_SIZE);
        gpio_set_dir(rows_pins[current_row], GPIO_IN);
        goto send;
    }
    
    gpio_set_dir(rows_pins[current_row], GPIO_IN);

    // fourth row
    // fifth row